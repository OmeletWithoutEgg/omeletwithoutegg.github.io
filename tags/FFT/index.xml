<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FFT on 蛋餅的競程隨筆</title><link>https://omeletwithoutegg.github.io/tags/FFT/</link><description>Recent content in FFT on 蛋餅的競程隨筆</description><generator>Hugo</generator><language>en-us</language><copyright>Omelet</copyright><lastBuildDate>Thu, 27 Feb 2025 10:27:49 +0800</lastBuildDate><atom:link href="https://omeletwithoutegg.github.io/tags/FFT/index.xml" rel="self" type="application/rss+xml"/><item><title>♯p Subset Sum</title><link>https://omeletwithoutegg.github.io/2025/02/27/sharp-p-subset-sum/</link><pubDate>Thu, 27 Feb 2025 10:27:49 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2025/02/27/sharp-p-subset-sum/</guid><description>&lt;h1 id="p-subset-sum--5e5">♯p Subset Sum : 5e5&lt;/h1>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>&lt;a href="https://judge.yosupo.jp/problem/sharp_p_subset_sum">https://judge.yosupo.jp/problem/sharp_p_subset_sum&lt;/a>&lt;/p>
&lt;p>有 $N$ 個小於等於 $T$ 的正整數 $s_0,s_1,\dots,s_N$，對於所有 $t = 1,2,\dots,T$，計算有幾個 $I \subseteq \{0,1,\dots,N-1\}$ 使得 $\sum _ {i\in I} s_i = t$，輸出模 $998244353$ 的餘數&lt;/p>
&lt;p>$N, T \leq 5 \times 10 ^ 5$&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>從 library-checker 學到的像是冷知識的東西。&lt;/p>
&lt;p>簡單來說就是要算多項式&lt;br>
$$&lt;br>
f(x) = \prod _ {i=0} ^ {N-1} (1 + x^{s_i})&lt;br>
$$&lt;br>
的前 $T + 1$ 項係數。&lt;/p>
&lt;p>看到連乘先想能不能多項式分治，但這邊總度數可能會很大。於是我們改對 $f$ 取 log。&lt;/p>
&lt;p>$$&lt;br>
\begin{aligned}&lt;br>
\log f(x)&lt;br>
&amp;amp;= \sum _ {i=0} ^ {N-1} \log (1 + x^{s_i}) \\&lt;br>
&amp;amp;= \sum _ {i=0} ^ {N-1} \sum _ {j=1} ^ \infty \frac{(-1)^{j+1}}{j} (x^{s_i})^j \\&lt;br>
&amp;amp;= \sum _ {i=0} ^ {N-1} \sum _ {j=1} ^ \infty \frac{(-1)^{j+1}}{j} (x^{s_i})^j \\&lt;br>
&amp;amp;= \sum _ {k=1} ^ T a_k \sum _ {j=1} ^ \infty \frac{(-1)^{j+1}}{j} (x^k)^j \\&lt;br>
&amp;amp;= \sum _ {k=1} ^ T a_k \sum _ {j=1} ^ \infty \frac{(-1)^{j+1}}{j} x^{kj} \\&lt;br>
&amp;amp;\equiv \sum _ {k=1} ^ T a_k \sum _ {j=1} ^ {\lfloor T / k \rfloor} \frac{(-1)^{j+1}}{j} x^{kj} \pmod {x^{T+1}} \\&lt;br>
\end{aligned}&lt;br>
$$&lt;/p></description></item><item><title>Multipoint Evaluation of Prefix Products</title><link>https://omeletwithoutegg.github.io/2025/01/09/multipoint-evaluation-of-prefix-products/</link><pubDate>Thu, 09 Jan 2025 23:10:09 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2025/01/09/multipoint-evaluation-of-prefix-products/</guid><description>&lt;h1 id="一次式前綴積的多點求值與推廣">一次式前綴積的多點求值與推廣&lt;/h1>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>給定序列 $a_1, \dots, a_N$。考慮一次式的序列 $x - a_i$，定義其第 $i$ 個前綴積為&lt;/p>
&lt;p>$$&lt;br>
f_i(x) = \prod _ {j \leq i} (x - a_j)&lt;br>
$$&lt;/p>
&lt;p>接著有 $Q$ 個詢問 $(u_i, v_i)$ 要你回答第 $u_i$ 個前綴積以 $x = v_i$ 代入所得到的值，即 $f_{u_i}(v_i)$。&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>naive 可以做到 $\mathcal{O}(NQ)$。以下介紹一個 $\mathcal{O}((N+Q)\log^2(N+Q))$ 的離線作法。&lt;/p>
&lt;p>先問一個問題：我們要怎麼快速的求出 $f_N(x)$ 這個多項式呢？如果用 $f_i(x) = f_{i-1}(x) \cdot (x - a_i)$ 每次直接 $\mathcal{O}(N)$ 乘的話，總共會花上 $\mathcal{O}(N^2)$ 的時間。然而，我們可以建出一棵平衡的二元樹，樹的葉子是這些一次式，如果按照由下到上的順序計算每個節點的小孩的乘積，並使用 FFT 等比較快的多項式乘法的話，總時間就會是 $\mathcal{O}(N\log^2N)$。這是因為使用 FFT 把兩個多項式 $f, g$ 相乘會需要 $\mathcal{O}(k\log k)$ 的時間，其中 $k=\deg (fg)$；而在這棵二元樹中每個節點所存的多項式 degree 會等於該節點的子樹裡面的葉子數量，所有節點的多項式 degree 總和又更進一步的等於每個葉子的深度和（可以想想為什麼），因此只要二元樹夠平衡，深度是 $\mathcal{O}(\log N)$ 的話，總共乘法所需的時間就會是 $\mathcal{O}(N\log ^2N)$。&lt;/p></description></item><item><title>FFT-NTT</title><link>https://omeletwithoutegg.github.io/2019/12/25/FFT-NTT/</link><pubDate>Wed, 25 Dec 2019 14:56:54 +0000</pubDate><guid>https://omeletwithoutegg.github.io/2019/12/25/FFT-NTT/</guid><description>&lt;h1 id="捲積方法-oao">捲積方法 OAO&lt;/h1>
&lt;p>本篇的重點應該是放在理解與使用與競程相關的捲積，其中會利用到FFT或NTT加速&lt;br>
這邊先定義一下捲積$ * $是什麼&lt;/p>
&lt;p>$$&lt;br>
(a * b) _ x = \sum _ {i+j=x} a_i b_j&lt;br>
$$&lt;/p>
&lt;p>實際上就等價於我們常見的多項式乘法&lt;br>
naive的做法是$\mathcal{O}(n^2)$，顯然不夠令人滿意&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> A.size(); i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> B.size(); j&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		res[i&lt;span style="color:#f92672">+&lt;/span>j] &lt;span style="color:#f92672">+=&lt;/span> A[i] &lt;span style="color:#f92672">*&lt;/span> B[j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="dft">DFT&lt;/h2>
&lt;p>先假設我們有兩個多項式&lt;br>
$$&lt;br>
A(x) = \sum a_i x^i, B(x) = \sum b_i x^i\newline&lt;br>
C(x) = A(x)B(x)&lt;br>
$$&lt;br>
除了上述利用分配律乘開以外&lt;br>
因為$C$的次數已經可以確定&lt;br>
我們也可以在$A(x)$和$B(x)$找出$n$個相異的點，相乘之後再利用插值法代入得到$C$&lt;br>
其中$n = \deg C + 1$&lt;br>
也就是&lt;/p></description></item><item><title>TIOJ-1035</title><link>https://omeletwithoutegg.github.io/2019/12/18/TIOJ-1035/</link><pubDate>Wed, 18 Dec 2019 08:08:39 +0000</pubDate><guid>https://omeletwithoutegg.github.io/2019/12/18/TIOJ-1035/</guid><description>&lt;h1 id="通關密語">通關密語&lt;/h1>
&lt;p>&lt;a href="https://tioj.ck.tp.edu.tw/problems/1035">https://tioj.ck.tp.edu.tw/problems/1035&lt;/a>&lt;/p>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>給定兩個長度小於 $5 \times 10^4$ 的小寫英文字母字串 $S,T$&lt;br>
定義「最佳擬合」，就是將 $S$ 經過平移後和 $T$ 比對，同樣的字元數最多的那一種方法。&lt;br>
請輸出一個正整數，代表最佳擬合的方案下，相同的字元有幾個。&lt;/p>
&lt;p>ex.&lt;br>
對於&lt;/p>
&lt;blockquote>
&lt;p>ababa&lt;br>
babab&lt;/p>&lt;/blockquote>
&lt;p>來說，&lt;/p>
&lt;blockquote>
&lt;p>ababa&lt;br>
=babab&lt;/p>&lt;/blockquote>
&lt;p>這是一種最佳擬合的方法，$S$經過向左平移之後$S,T$有四個位置的字元相同&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>naive的$n^2$做法可以AC本題，只要妥當控制常數即可&lt;br>
不過這裡提供一個NTT的$\mathcal{O}(C\cdot n\log n)$解&lt;/p>
&lt;p>假設$S$對$T$的平移量是$x$(可以為負的)，題目所求為&lt;/p>
&lt;p>$$&lt;br>
\sum _ {i-j = x} [S_i = T_j]&lt;br>
$$&lt;/p>
&lt;p>的最大值&lt;/p>
&lt;p>那我們枚舉26種英文字母，可以寫成&lt;/p>
&lt;p>$$&lt;br>
\sum _ {c \in \sigma} \sum _ {i-j = x} [S_i = c] \cdot [T_j = c]&lt;br>
$$&lt;/p>
&lt;p>令$F_i = [S_i = c], G_j = [T _ {-j} = c]$&lt;br>
答案便是&lt;/p></description></item></channel></rss>